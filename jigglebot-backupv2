import time
import threading
import ctypes
from pystray import Icon, MenuItem, Menu
from PIL import Image, ImageDraw
import os
import sys
import win32com.client
import tkinter as tk
from tkinter import messagebox

# Prevent multiple instances using a named mutex
def is_already_running():
    mutex = ctypes.windll.kernel32.CreateMutexW(None, False, "JiggleBotMutex")
    last_error = ctypes.windll.kernel32.GetLastError()
    return last_error == 183  # ERROR_ALREADY_EXISTS


# after changes, run rebundle.ps1

# Global variables
paused = False
stop_event = threading.Event()


# Windows idle time detection
class IdleTime:
    class LASTINPUTINFO(ctypes.Structure):
        _fields_ = [("cbSize", ctypes.c_uint), ("dwTime", ctypes.c_uint)]

    @staticmethod
    def get_idle_duration():
        lii = IdleTime.LASTINPUTINFO()
        lii.cbSize = ctypes.sizeof(IdleTime.LASTINPUTINFO)
        ctypes.windll.user32.GetLastInputInfo(ctypes.byref(lii))
        millis = ctypes.windll.kernel32.GetTickCount() - lii.dwTime
        return millis / 1000.0

# Simulate mouse movement
def simulate_mouse_move():
    ctypes.windll.user32.mouse_event(0x0001, 0, 1, 0, 0)

# Background thread
def monitor_idle():
    while not stop_event.is_set():
        if not paused and IdleTime.get_idle_duration() > 240:  # 4 minutes
            simulate_mouse_move()
        time.sleep(60)


# Tray icon setup
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        base_path = sys._MEIPASS  # PyInstaller sets this at runtime
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

def create_image():
    return Image.open(resource_path("tray_icon.png"))


def get_startup_shortcut_path():
    startup_dir = os.path.join(os.getenv('APPDATA'), 'Microsoft\\Windows\\Start Menu\\Programs\\Startup')
    return os.path.join(startup_dir, "JiggleBot.lnk")

def is_in_startup():
    return os.path.exists(get_startup_shortcut_path())


# Tray icon actions
def toggle_startup(icon, item):
    shortcut_path = get_startup_shortcut_path()
    if is_in_startup():
        os.remove(shortcut_path)
        item.text = "Enable Start with Windows"
    else:
        exe_path = sys.executable
        shell = win32com.client.Dispatch("WScript.Shell")
        shortcut = shell.CreateShortCut(shortcut_path)
        shortcut.Targetpath = exe_path
        shortcut.WorkingDirectory = os.path.dirname(exe_path)
        shortcut.IconLocation = exe_path
        shortcut.save()
        item.text = "Disable Start with Windows"

def show_about(icon, item):
    messagebox.showinfo("About", "Jiggle Bot: Progammatic Mouse Jiggler\nVersion 1.0\nPrevents screen lock due to inactivity.\nBy RodrigoCossi @ GitHub.com")

def toggle_pause(icon, item):
    global paused
    paused = not paused
    item.text = "Resume" if paused else "Pause"

def on_exit(icon, item):
    stop_event.set()
    icon.stop()

def uninstall(icon, item):
    try:
        if is_in_startup():
            os.remove(get_startup_shortcut_path())

        target_exe = os.path.join(os.getenv('LOCALAPPDATA'), 'JiggleBot', 'JiggleBot.exe')
        if os.path.exists(target_exe):
            os.remove(target_exe)

        messagebox.showinfo("Uninstall", "Jiggle Bot has been uninstalled from startup.")
        icon.stop()
    except Exception as e:
        messagebox.showerror("Error", f"Uninstall failed:\n{e}")



# Startup management
def main():
    
    if is_already_running():
        messagebox.showinfo("Jiggle Bot", "Jiggle Bot is already running in the system tray.")
        return

    threading.Thread(target=monitor_idle, daemon=True).start()
    
    # Initialize Tkinter root for messagebox
    root = tk.Tk()
    root.withdraw()

    # Show startup popup
    messagebox.showinfo("Jiggle Bot", "Jiggle Bot has been installed!\nYou can find it in the system tray.")


    startup_item = MenuItem(
        "Disable Start with Windows" if is_in_startup() else "Enable Start with Windows",
        toggle_startup
    )

    icon = Icon("jigglebot", icon=create_image(), title="Jiggle Bot: Progammatic Mouse Jiggler")
    icon.menu = Menu(
        MenuItem("About", show_about),
        MenuItem("Pause", toggle_pause),
        startup_item,
        MenuItem("Exit", on_exit),
        MenuItem("Uninstall", uninstall)

    )
    icon.run()

if __name__ == "__main__":
    main()
